/**
 * Generated by JitBlox - rapid interactive prototyping of modern web apps from your browser.
 * Upgrade to a Pro plan to remove this header, see https://www.jitblox.com/plans for more.
 *
 * Check out this JitBlox project, Soluce, at https://www.jitblox.com/project/5JHnGKTPaU/soluce
 */

import { inject, Injectable, signal } from '@angular/core';
import { Problem } from '../model';
import { problem_list_mock } from './problem.service.mock-data';
import { catchError, map, Observable, of, tap, throwError } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({ providedIn: 'root' })
export class ProblemService {
  /**
   * fetch problems which groups of user has authorization to work on
   */
  public fetchProblemsOfUserGroups(): Observable<Problem[]> {
    return of(
      problem_list_mock.sort((a, b) => {
        return a.id! - b.id!;
      })
    );
  }

  /**
   * Create a new problem entry.
   *
   * Base mock implementation used in development without a backend. It simulates
   * a server-created entity and maps the boolean visibility flag to the app's
   * string-based `open` field ('Public' | 'Private').
   *
   * @param body The payload expected by the backend service containing the
   * name, an optional description, and a boolean flag for visibility.
   * - When `open` is `true`, visibility is interpreted as 'Public'.
   * - When `open` is `false`, visibility is interpreted as 'Private'.
   * @returns An observable emitting the created {@link Problem}.
   */
  public createProblem(body: { name: string; description?: string; open: boolean }): Observable<Problem> {
    const mockCreated: Problem = {
      id: Math.floor(Math.random() * 100000),
      name: body.name,
      description: body.description,
      open: body.open === true ? 'Public' : 'Private',
    };
    return of(mockCreated);
  }
}
